Class JSONTemplate.Generator Extends %RegisteredObject
{

/// JSON出力する処理の生成
/// JSONの値の文字列に#(..プロパティ名)#または#(..#パラメータ名)#を指定することで
/// プロパティの値をJSON形式で出力できます。
/// プロパティの型がJSONTemplate.Baseを継承したクラスの場合、
/// そのクラスのテンプレートからJSON出力します。
ClassMethod GenerateObject(outstream As %Stream, type As %String, template As %DynamicAbstractObject, path As %String, ByRef params, ByRef props) As %Status
{
    set ret=$$$OK
    try {
        set dynamic=0
        
        // templateのメンバーを順に取り出す
        set iter=template.%GetIterator()
#if $SYSTEM.Version.GetMajor()>2021
        while iter.%GetNext(.mkey,.value,.mtype) {
#Else
        while iter.%GetNext(.mkey,.value) {
            set mtype=$select($isobject(value):$select(value.%IsA("%DynamicArray"):"object",1:"array"),1:"string")
#Endif
             if mtype="object" {
                // メンバーがオブジェクトの場合
                set path2=$select(dynamic:..SetJSONString(outstream, value),1:path_"."_$select(type="object":mkey,1:"%Get("_mkey_")"))
                set ret=..GenerateObject(outstream, "object",value,path2,.params,.props)
                quit:$$$ISERR(ret)
                do:dynamic outstream.WriteLine(" do "_path_".%Push("_path2_")")
                continue
            } elseif mtype="array" {
                // メンバーがarray の場合
                // Array部分の生成
                set path2=$select(dynamic:..SetJSONString(outstream, value),1:path_"."_$select(type="object":mkey,1:"%Get("_mkey_")"))
                set ret=..GenerateObject(outstream, "array", value, path2, .params, .props)
                quit:$$$ISERR(ret)
                do:dynamic outstream.WriteLine(" do "_path_".%Push("_path2_")")
                continue
            } elseif value'["#("&&(value'[")#") {
                // 固定文字列の場合
                if type="array"&&(dynamic) {
                    do ..OutputValue(outstream,value,path_".%Get("_mkey_")")
                }
                continue
            } elseif value="#($this)#" {
                // 現在のインスタンスでデフォルトのテンプレートを使って出力する
                // objectやarray形式の置き換え
                set token=$piece($piece(value,")#"),"#(",2)
                set ret=..GetParamInfo(token,.info,.params,.props)
                quit:$$$ISERR(ret)
                //zw info
                set:'dynamic&&(type="array") dynamic=mkey+1
                do ..OutputObject(outstream, info, path_"."_$select(type="object":mkey,1:"%Get("_mkey_")"))
                do template.%Set(mkey,"")
                continue
            } elseif value?1"#("2"."1E1A.AN.1(1"("1(1A.AN).(1"."1A.AN)1")")1")#" {
                // objectやarray形式の置き換え
                set token=$piece($piece(value,")#"),"#(",2)
                set ret=..GetParamInfo(token,.info,.params,.props)
                quit:$$$ISERR(ret)
                //zw info
                set:'dynamic&&(type="array") dynamic=mkey+1
                if $lg(info)="param" {
                    // パラメータの場合
                    do ..OutputParameter(outstream,$lg(info,2),path_"."_$select(type="object":mkey,1:"%Get("_mkey_")"))
                    do template.%Set(mkey,"")
                    continue
                }
                if $lg(info)="prop" {
                    // プロパティの場合
                    if $lg(info,4)="" {
                        do ..OutputObject(outstream, info, path_"."_$select(type="object":mkey,1:"%Get("_mkey_")"))
                    } else {
                        do ..OutputProperty(outstream, info, path_"."_$select(type="object":mkey,1:"%Get("_mkey_")"))
                    }
                    do template.%Set(mkey,"")
                    continue
                }
                continue
           }
            // 文字列、数字の置き換え
            // 最初に#)がないかをチェック
            set code=""
            set literal=$piece(value,"#(")
            if $length(literal,")#")>1 {
                set ret=$$$ERROR(5001,"「#(」が見つかりません")
                quit
            }
            set code="",codeopen=0
            set:literal'="" code=""""_$replace(literal,"""",""""""),codeopen=1

            // プロパティ、パラメータを抽出
            for v=2:1:$length(value,"#(") {
                set var=$piece(value,"#(",v)
                // )#があることをチェック
                set l=$length(var,")#")
                if l'=2 {
                    set ret=$$$ERROR(5001,"「)#」が"_$select(l>2:"多すぎます",1:"見つかりません"))
                    quit
                }
                set literal=$piece(var,")#",2)
                set var=$piece(var,")#")
                quit:$$$ISERR(ret)
                set ret=..GetParamInfo(var,.info,.params,.props)
                quit:$$$ISERR(ret)
                if $lg(info)="param" {
                    set code=code_$select(code'=""&&codeopen:"""_",code'="":"_",1:"")_"obj.#"_$lg(info,2),codeopen=0
                } elseif $lg(info)="prop" {
                    set code=code_$select(code'=""&&codeopen:"""_",code'="":"_",1:"")_"obj."_$lg(info,2),codeopen=0
                }
                set:literal'="" code=code_$select(code'=""&&codeopen:"",code'="":"_""",1:"""")_$replace(literal,"""",""""""),codeopen=1
            }
            set code=code_$select(codeopen:"""",1:"")
            set:'dynamic&&(type="array") dynamic=mkey+1
            // 出力
            if type="array" {
                do outstream.WriteLine(" do "_path_".%Push("_code_")")
            } else {
                do outstream.WriteLine(" set "_path_"."_mkey_"="_code)
            }
            do template.%Set(mkey,"")
            quit:$$$ISERR(ret)
#if $SYSTEM.Version.GetMajor()>2021
        }
#else
        }
#endif
        if type="array"&&dynamic {
            set size=template.%Size()
            for i=dynamic:1:size {
                do template.%Pop()
            }
        }
    } catch err {
        set ret=$SYSTEM.Status.AppendStatus($$$ERROR(5001,"エラーが発生しました"),err.AsStatus())
    }
    quit ret
}

/// 変数の構文解析
/// パラメータやプロパティの属性を取得する
/// info ... $lb("param",paramname,default)
///          $lb("this","",%class.Name,"object")
///          $lb("prop",propname,proptype,classtype,required,collection,displayflg,templateclass)
ClassMethod GetParamInfo(token As %String, ByRef info, ByRef params, ByRef props) As %Status
{
    set info=""
    set ret=$$$OK
    try {
        if token="$this" {
            set info=$lb("this","",%class.Name,"object")
        } elseif $extract(token,1,3)="..#" {
            // パラメータ値代入
            set token=$extract(token,4,*)
            write:%debug "パラメータ:",token,!
            // パラメータチェック
            if token="" {
                set ret=$$$ERROR(5001,"パラメータ名が存在しません")
                quit
            }
            if '$data(params(token),val) {
                set ret=$$$ERROR(5001,"パラメータ「"_token_"」が存在しません")
                quit
            }
            set info=$lb("param",token)_val
        } elseif $extract(token,1,2)=".." {
            set token=$extract(token,3,*)
            // パラメータチェック
            write:%debug "プロパティ:",token,!
            // テンプレートクラスチェック
            if token["(" {
                set templateclass=$piece($piece(token,")"),"(",2)
                set token=$piece(token,"(")
                if templateclass="" {
                    set ret=$$$ERROR(5001,"プロパティ"_token_"のテンプレート名が指定されていません")
                    quit
                }
            }
            if token="" {
                set ret=$$$ERROR(5001,"プロパティ名が存在しません")
                quit
            }
            if '$data(props(token),val) {
                set ret=$$$ERROR(5001,"プロパティ「"_token_"」が存在しません")
                quit
            }
            set info=$lb("prop",token)_val_$select($data(templateclass):$lb(templateclass),1:"")
        } else {
            set ret=$$$ERROR(5001,"パラメータ、プロパティの指定が誤っています 値:"_token)
            quit
        }
    } catch err {
        set ret=err.AsStatus()
    }
    quit ret
}

/// パラメータ値の出力
ClassMethod OutputParameter(outstream As %Stream, param As %String, path As %String) As %Status
{
    write:%debug "output parameter",!
    set base=$piece(path,".",1,*-1)_".",current=$piece(path,".",*)
    if $piece(path,".",*)["(" {
        set cmd=base_$zstrip($replace(current,"%Get","%Push"),">W",")")
        do outstream.WriteLine(" do "_base_"%Push(obj.#"_param_")")
    } else {
        do outstream.WriteLine(" set "_path_"=obj.#"_param)
    }
    quit $$$OK
}

/// 固定文字列の出力
ClassMethod OutputValue(outstream As %Stream, value As %String, path As %String) As %Status
{
    write:%debug "output value",!
    set base=$piece(path,".",1,*-1)_"."
    do outstream.WriteLine(" do "_base_"%Push("_$select((+value)=value:value,1:""""_$replace(value,"""","""""")_""")"))
    quit $$$OK
}

/// オブジェクト出力
ClassMethod OutputObject(outstream As %Stream, info As %List, path As %String) As %Status
{
    write:%debug "output Object",!
    set propstr=$select($lg(info,2)'="":"obj."_$lg(info,2),1:"obj")
    set templatestr=$select($lg(info,8)'="":"##class("_$lg(info,8)_")",1:propstr)
    set templateclass=$select($lg(info,8)'="":$lg(info,8),1:$lg(info,3))

    set base=$piece(path,".",1,*-1)_".",current=$piece(path,".",*)
    if $lg(info,6)'="" {
        // リスト形式の場合
        //set cmd=base_$replace(current,"%Get","%Remove")
        //do outstream.WriteLine(" do "_base_$replace(current,"%Get","%Remove"))
        do outstream.WriteLine(" if $isobject("_propstr_") {")
        do outstream.WriteLine(" if "_propstr_".%Extends(""%Library.DynamicArray"") {")
        do outstream.WriteLine("   set iter="_propstr_".%GetIterator() for loop=1:1 { quit:'iter.%GetNext(.k,.v)  do "_base_"%Push(##class("_templateclass_").Process(v,.ret)) quit:$$$ISERR(ret) } quit:$$$ISERR(ret)")
        do outstream.WriteLine(" } else {")
        do outstream.WriteLine("   set key="""" for loop=1:1 { set obj2="_propstr_".GetNext(.key) quit:key=""""  do "_base_"%Push("_templatestr_".Process(obj2,.ret)) quit:$$$ISERR(ret) } quit:$$$ISERR(ret)")
        do outstream.WriteLine(" }}")
    } else {
        // プロパティがオブジェクトの場合
        if current["(" {
            // リスト形式の場合
            //set cmd=base_$zstrip($replace(current,"%Get","%Push"),">W",")")
            do outstream.WriteLine(" if $isobject("_propstr_") {")
            do outstream.WriteLine(" if "_propstr_".%Extends(""%Library.DynamicObject"") {")
            do outstream.WriteLine("   do "_base_"%Push(##class("_templateclass_").Process("_propstr_",.ret)) quit:$$$ISERR(ret)")
        } else {
            // オブジェクト形式の場合
            do outstream.WriteLine(" if $isobject("_propstr_") {")
            do outstream.WriteLine(" if "_propstr_".%Extends(""%Library.DynamicObject"") {")
            do outstream.WriteLine("   set "_path_"=##class("_templateclass_").Process("_propstr_",.ret) quit:$$$ISERR(ret)")
        }
        if $lg(info)="this" {
            // $thisの場合、自己参照に陥るのを防ぐ
            do outstream.WriteLine(" } elseif "_propstr_".%ClassName(1)="""_$lg(info,3)_""" {")
            do outstream.WriteLine("   set ret=$$$ERROR(5001,""テンプレートとオブジェクトの型が一致しているため出力できません class=""_"_propstr_".%ClassName(1)) quit")
        }
        do outstream.WriteLine(" } elseif "_propstr_".%Extends("""_$lg(info,3)_""") {")
        if current["(" {
            // リスト形式の場合
            //set cmd=base_$zstrip($replace(current,"%Get","%Set"),">W",")")
            do outstream.WriteLine("   do "_base_"%Push("_templatestr_".Process("_propstr_",.ret)) quit:$$$ISERR(ret)")
        } else {
            // オブジェクト形式の場合
            do outstream.WriteLine("   set "_path_"="_templatestr_".Process("_propstr_",.ret) quit:$$$ISERR(ret)")
        }
        do outstream.WriteLine(" } else { set ret=$$$ERROR(5001,""プロパティ"_$lg(info,2)_"の型が誤っています class=""_"_propstr_".%ClassName(1)) quit }")
        
        /*
        // GetByCodeメソッドが存在する場合(Abstract=0)、プロパティに文字列が指定されるとその文字からオブジェクトを取得する
        set mdef=##class(%Dictionary.CompiledMethod).%OpenId($lg(info,3)_"||GetByCode")
        if $isobject(mdef)&&('mdef.Abstract) {
            do outstream.WriteLine(" } elseif "_propstr_"'="""" { set "_path_"=##class("_templateclass_").Process(##class("_templateclass_").GetByCode("_propstr_"),.ret)")
        }
        */
        do outstream.WriteLine(" } else {")
        // プロパティがNULLの場合
        if current["(" {
            do:$lg(info,5) outstream.WriteLine("   set ret=$$$ERROR(5001,""プロパティ"_$lg(info,2)_"がNULLになっています"") quit")
        } else {
            do outstream.WriteLine("   "_$select('$lg(info,5):"do "_base_"%Remove("""_current_""")",1:"set ret=$$$ERROR(5001,""プロパティ"_$lg(info,2)_"がNULLになっています"") quit"))
        }

        do outstream.WriteLine(" }")
    }
    quit $$$OK
}

/// プロパティ値の出力
ClassMethod OutputProperty(outstream As %Stream, info As %List, path As %String) As %Status
{
    write:%debug "output Property",!
    set propstr=$select($lg(info,2)'="":"obj."_$lg(info,2),1:"obj")
    set base=$piece(path,".",1,*-1)_".",current=$Piece(path,".",*)

    // リストの場合
    if $lg(info,6)'="" {
        do outstream.WriteLine(" if "_propstr_"="""" {")
        do outstream.WriteLine(" } elseif "_propstr_".%Extends(""%Library.DynamicArray"") {")
        do outstream.WriteLine("   set iter="_propstr_".%GetIterator() for loop=1:1 { quit:'iter.%GetNext(.k,.v)  do "_base_"%Push(v) }")
        do outstream.WriteLine(" } else {")
        do outstream.WriteLine("   set key="""" for loop=1:1 { set v="_propstr_".GetNext(.key) quit:key=""""  do "_base_"%Push(v) }")
        do outstream.WriteLine(" }")
    } else {
        
        if current["(" {
            // Arrayの場合
            do outstream.WriteLine(" do:"_propstr_"'="""" "_base_"%Push("_propstr_$select($lg(info,7):"LogicalToDisplay("_propstr_")",1:"")_")")
        } else {
            // Objectの場合
            do:'$lg(info,5) outstream.WriteLine(" if "_propstr_"="""" { do "_base_"%Remove("""_$piece(path,".",*)_""") } else {")
            if $lg(info,7) {
                // DISPLAYLIST,VALUELISTがある場合
                do outstream.WriteLine(" set "_path_"="_propstr_"LogicalToDisplay("_propstr_")")
            } elseif ",INTEGER,NUMERIC,DOUBLE,BIGINT,"[(","_$lg(info,4)_",") {
                // 数値型の場合、+演算子を使って数値化
                do outstream.WriteLine(" set "_path_"=+("_propstr_")")
            } else {
                do outstream.WriteLine(" set "_path_"="_propstr)
            }
            do:'$lg(info,5) outstream.WriteLine(" }")
        }
    }
    quit $$$OK
}

ClassMethod InitJSONString()
{
    kill %jsonstring
}

ClassMethod SetJSONString(code As %Stream.TmpCharacter, tpl As %DynamicAbstractObject) As %String
{
    set %jsonstring($increment(%jsonstring))=tpl
    do code.WriteLine("")
    do code.WriteLine("$tpl"_%jsonstring)
    quit "tpl"_%jsonstring
}

}
